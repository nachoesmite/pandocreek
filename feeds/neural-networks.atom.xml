<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pandocreek - Neural Networks</title><link href="https://pandocreek.com/" rel="alternate"></link><link href="https://pandocreek.com/feeds/neural-networks.atom.xml" rel="self"></link><id>https://pandocreek.com/</id><updated>2024-11-13T10:20:00-03:00</updated><entry><title>Beam Search</title><link href="https://pandocreek.com/beam-search.html" rel="alternate"></link><published>2024-11-13T10:20:00-03:00</published><updated>2024-11-13T10:20:00-03:00</updated><author><name>nacho esmite</name></author><id>tag:pandocreek.com,2024-11-13:/beam-search.html</id><summary type="html">&lt;p&gt;Hi folks! In this post I'm doing a summary of Beam Search so I can understand it better and hopefully help someone :) &lt;/p&gt;
&lt;p&gt;Beam search is a heuristic algorithm used in sequence models for tasks like translation, text generation, and voice recognition. It is an improvement
over breadth-first search.&lt;/p&gt;
&lt;h2&gt;How it ‚Ä¶&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Hi folks! In this post I'm doing a summary of Beam Search so I can understand it better and hopefully help someone :) &lt;/p&gt;
&lt;p&gt;Beam search is a heuristic algorithm used in sequence models for tasks like translation, text generation, and voice recognition. It is an improvement
over breadth-first search.&lt;/p&gt;
&lt;h2&gt;How it works?&lt;/h2&gt;
&lt;p&gt;At each step of the process, &lt;em&gt;beam search&lt;/em&gt; keeps a limited set of sequences that seem promising given a score or probability. 
This set is called the &lt;em&gt;beam&lt;/em&gt; and its size is controlled by a parameter called &lt;em&gt;beam width&lt;/em&gt;, usually represented by the character &lt;code&gt;K&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Steps to create a sequence&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We start with the initial state, which could be &amp;lt;start&amp;gt; or the tag that you are using.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expansion:&lt;/strong&gt; Generate all possible words or tokens given the current sequences. At the starting point, it is &lt;em&gt;&amp;lt;start&amp;gt;&lt;/em&gt; + all the tokens in the vocabulary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Selection:&lt;/strong&gt; Get a score for each extended sequence and pick the &lt;strong&gt;K&lt;/strong&gt; best.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeat:&lt;/strong&gt; Repeat the process until you reach &amp;lt;stop&amp;gt; or a "stop" token you define.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Whiteboard explanation&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Beam Search Diagram" src="draws/beam_search.png"&gt;&lt;/p&gt;
&lt;h2&gt;In other words üë®üèª‚Äçüíº:&lt;/h2&gt;
&lt;p&gt;Let's say we have the following set at a given time &lt;strong&gt;t&lt;/strong&gt;, and let's call that set &lt;strong&gt;C&lt;/strong&gt; for candidates.&lt;/p&gt;
&lt;div class="math"&gt;$$
C_t = \{ (x_1^1, \dots, x_t^1), \dots, (x_1^K, \dots, x_t^K) \}
$$&lt;/div&gt;
&lt;p&gt;
At time &lt;strong&gt;t+1&lt;/strong&gt; we have &lt;span class="math"&gt;\(\tilde{C} _{t+1}\)&lt;/span&gt; which expands &lt;span class="math"&gt;\(C_t\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\tilde{C_{t+1}} =  \{ (x_1^k, \dots, x_t^k, v_1), \dots, (x_1^k, \dots, x_t^k, v_{|V|}) \}
$$&lt;/div&gt;
&lt;p&gt;This gives us a set of size: K*|V|, where |V| is the size of the vocabulary; here we need to pick again the best &lt;strong&gt;K&lt;/strong&gt; candidates. 
In seq2seq architectures the size is usually K*K, but it depends on the implementation. &lt;/p&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Balance between exploration and efficiency: Does not explore all options, but is better than greedy search.&lt;/li&gt;
&lt;li&gt;Precision: Usually gets better sequences than other simpler strategies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Does not guarantee a global optimum.&lt;/li&gt;
&lt;li&gt;Computationally Expensive: Requires more calculations than simpler strategies.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Neural Networks"></category></entry></feed>